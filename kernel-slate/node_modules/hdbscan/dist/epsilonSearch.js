"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.epsilonSearch = void 0;
const traversals_1 = require("./traversals");
function epsilonSearch(leaves, clusterTree, clusterSelectionEpsilon, allowSingleCluster) {
    const selectedClusters = new Set();
    const processed = new Set();
    for (const leaf of leaves) {
        const childMatch = clusterTree.find(t => t.child === leaf);
        if (!childMatch) {
            throw Error('child not found in clusterTree');
        }
        const eps = 1 / childMatch.lambda;
        if (eps < clusterSelectionEpsilon) {
            if (!processed.has(leaf)) {
                const epsilonChild = (0, traversals_1.traverseUpwards)(clusterTree, clusterSelectionEpsilon, leaf, allowSingleCluster);
                selectedClusters.add(epsilonChild);
                const bfsFromSubtree = (0, traversals_1.bfsFromClusterTree)(clusterTree, epsilonChild);
                for (const subNode of bfsFromSubtree) {
                    if (subNode != epsilonChild) {
                        processed.add(subNode);
                    }
                }
            }
        }
        else {
            selectedClusters.add(leaf);
        }
    }
    return selectedClusters;
}
exports.epsilonSearch = epsilonSearch;
